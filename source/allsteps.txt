# Welcome!  Lines like this are comments from me.
# Input commands that start with a "!" are instructions for the interpreter
# The first code is in the machine spec itself
! type arch-spec:28,33

# Start a test run, with just the first opcodes the hint suggests
! opcodes 0,19,21
# Running the machine now will reveal the second code
! run

# Now start the machine again, this time with all of the opcodes turned on
! opcodes all

# This time when it's run, the bootup test sequence will reveal the third code 
! run

take tablet
# Using the tablet reveals the fourth code
use tablet
doorway
north
north
bridge
continue
down
east
take empty lantern
west
west
passage
ladder
west
south

# This shows the fifth code in the ruins
north
take can
use can
use lantern
west
ladder
darkness
continue
west
west
west
west
north
take red coin
north
east
take concave coin
down
take corroded coin
up
west
west
take blue coin
up
take shiny coin
down
east
look blue coin
look concave coin
look corroded coin
look red coin
look shiny coin

# The coins need to be added in the proper order, a helper here, called "solve_coins", picks the order
use blue coin
use red coin
use shiny coin
use concave coin
use corroded coin
north
take teleporter

# The teleporter shows the sixth code in the stars
use teleporter
take business card
look business card
take strange book
look strange book

# The book mentions needing to set the 8th register to a value and run a long running confirmation process.
# After a bit of debugging, that process is located here:
! decompile 6027 6067

# "energy_level" in this project is an implementation of this, showing which value of the eigth register will result in a correct value.  Here it's being set with a backdoor to set the register
! set_register 8 25734

# Disable the jump to the confirmation process, it takes forever
! no_op 5489

# And the invert the logic of this jump, thus continuing as if the confirmation worked.
! op 5495 jt

# This will reveal the seventh code
use teleporter

north
north
north
north
north
north
north

east
take journal
look journal
west

north
north
take orb

# At this point we're entering a maze.  The "vaults" helper solves the maze and finds the following path to run through it
north
east
east
north
west
south
east
east
west
north
north
east

vault
take mirror
use mirror

# That code is reflected in a mirror, using a helper to decode it to reveal the final code

! reverse_mirror

# We're all done!

! end
